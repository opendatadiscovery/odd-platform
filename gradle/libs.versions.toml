[versions]
spring-webflux = '6.0.9'
reactor-extra = '3.5.1'
micrometer-registry-prometheus = '1.9.0'
ingestion-contract-server = '0.1.24'
oddrn-generator-java = '0.1.20'
odd-integration-manifests = '0.0.4'
apache-collections = '4.4'
apache-lang = '3.12.0'
r2dbc-spi = '1.0.0.RELEASE'
r2dbc-postgresql = '1.0.1.RELEASE'
r2dbc-pool = '1.0.0.RELEASE'
jooq = '3.18.4'
jooq-codegen = '3.18.4'
flyway-core = '9.19.4'
psql-driver = '42.6.0'
jakarta-validation = '3.0.2'
jakarta-annotation = '2.1.1'
jackson-annotations = '2.15.2'
jackson-datatype-jsr310 = '2.15.2'
jackson-yaml = '2.15.2'
jackson-databind-nullable = '0.2.6'
jetbrains-annotations = '23.0.0'
swagger-annotations = '2.2.11'
springfox-core = '3.0.0'
mapstruct = '1.5.3.Final'
opentelemetry = '1.6.0'
opentelemetry-alpha = '1.6.0-alpha'
slack-api = '1.27.0'
uuid-generator = '4.0.1'
shedlock-version = '4.42.0'
json-schema-validator = '1.0.84'
caffeine = '3.1.1'
lombok = '1.18.24'
testcontainers = '1.18.3'
slf4j-api = '1.7.30'
logback = '1.2.11'
easy-random-core = '5.0.0'
protobuf-java = '3.21.12'
snappy-java = '1.1.9.1'
minio = '8.4.6'
okhttp = '4.10.0'

[libraries]
spring-starter-webflux = { module = 'org.springframework.boot:spring-boot-starter-webflux' }
spring-webflux = { module = 'org.springframework:spring-webflux', version.ref = 'spring-webflux' }
spring-jooq = { module = 'org.springframework.boot:spring-boot-starter-jooq' }
spring-actuator = { module = 'org.springframework.boot:spring-boot-starter-actuator' }
spring-security = { module = 'org.springframework.boot:spring-boot-starter-security' }
spring-thymeleaf = { module = 'org.springframework.boot:spring-boot-starter-thymeleaf' }
spring-oauth2-client = { module = 'org.springframework.boot:spring-boot-starter-oauth2-client' }
spring-oauth2-rs = { module = 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' }
spring-aop = { module = 'org.springframework.boot:spring-boot-starter-aop' }
spring-session = { module = 'org.springframework.session:spring-session-core' }
spring-security-ldap = { module = 'org.springframework.security:spring-security-ldap' }
spring-r2dbc = { module = 'org.springframework:spring-r2dbc' }
spring-data-redis = { module = 'org.springframework.boot:spring-boot-starter-data-redis-reactive' }
spring-data-session-redis = { module = 'org.springframework.session:spring-session-data-redis' }
spring-validator = { module = 'org.springframework.boot:spring-boot-starter-validation' }
reactor-extra = { module = 'io.projectreactor.addons:reactor-extra', version.ref = 'reactor-extra' }
micrometer-registry-prometheus = { module = 'io.micrometer:micrometer-registry-prometheus', version.ref = 'micrometer-registry-prometheus' }
ingestion-contract-server = { module = 'org.opendatadiscovery:ingestion-contract-server', version.ref = 'ingestion-contract-server' }
oddrn-generator-java = { module = 'org.opendatadiscovery:oddrn-generator-java', version.ref = 'oddrn-generator-java' }
odd-integration-manifests = { module = 'org.opendatadiscovery:integration-manifests', version.ref = 'odd-integration-manifests' }
apache-collections = { module = 'org.apache.commons:commons-collections4', version.ref = 'apache-collections' }
apache-lang = { module = 'org.apache.commons:commons-lang3', version.ref = 'apache-lang' }
r2dbc-spi = { module = 'io.r2dbc:r2dbc-spi', version.ref = 'r2dbc-spi' }
r2dbc-postgresql = { module = 'org.postgresql:r2dbc-postgresql', version.ref = 'r2dbc-postgresql' }
r2dbc-pool = { module = 'io.r2dbc:r2dbc-pool', version.ref = 'r2dbc-pool' }
jooq = { module = 'org.jooq:jooq', version.ref = 'jooq' }
jooq-codegen = { module = 'org.jooq:jooq-codegen', version.ref = 'jooq-codegen' }
flyway-core = { module = 'org.flywaydb:flyway-core', version.ref = 'flyway-core' }
psql-driver = { module = 'org.postgresql:postgresql', version.ref = 'psql-driver' }
jakarta-annotation = { module = 'jakarta.annotation:jakarta.annotation-api', version.ref = 'jakarta-annotation' }
jakarta-validation = { module = 'jakarta.validation:jakarta.validation-api', version.ref = 'jakarta-validation' }
jackson-datatype-jsr310 = { module = 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310', version.ref = 'jackson-datatype-jsr310' }
jackson-databind-nullable = { module = 'org.openapitools:jackson-databind-nullable', version.ref = 'jackson-databind-nullable' }
jackson-annotations = { module = 'com.fasterxml.jackson.core:jackson-annotations', version.ref = 'jackson-annotations' }
jackson-yaml = { module = 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml', version.ref = 'jackson-yaml' }
jetbrains-annotations = { module = 'org.jetbrains:annotations', version.ref = 'jetbrains-annotations' }
swagger-annotations = { module = 'io.swagger.core.v3:swagger-annotations', version.ref = 'swagger-annotations' }
springfox-core = { module = 'io.springfox:springfox-core', version.ref = 'springfox-core' }
mapstruct = { module = 'org.mapstruct:mapstruct', version.ref = 'mapstruct' }
mapstruct-processor = { module = 'org.mapstruct:mapstruct-processor', version.ref = 'mapstruct' }
opentelemetry-api = { module = 'io.opentelemetry:opentelemetry-api', version.ref = 'opentelemetry' }
opentelemetry-api-metrics = { module = 'io.opentelemetry:opentelemetry-api-metrics', version.ref = 'opentelemetry-alpha' }
opentelemetry-sdk-metrics = { module = 'io.opentelemetry:opentelemetry-sdk-metrics', version.ref = 'opentelemetry-alpha' }
opentelemetry-exporter-otlp-metrics = { module = 'io.opentelemetry:opentelemetry-exporter-otlp-metrics', version.ref = 'opentelemetry-alpha' }
slack-api-model = { module = 'com.slack.api:slack-api-model', version.ref = 'slack-api' }
slack-api = { module = 'com.slack.api:slack-api-client', version.ref = 'slack-api' }
uuid-generator = { module = 'com.fasterxml.uuid:java-uuid-generator', version.ref = 'uuid-generator' }
shedlock = { module = 'net.javacrumbs.shedlock:shedlock-spring', version.ref = 'shedlock-version' }
shedlock-jdbc-lock-provider = { module = 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template', version.ref = 'shedlock-version' }
json-schema-validator = { module = 'com.networknt:json-schema-validator', version.ref = 'json-schema-validator' }
caffeine = { module = 'com.github.ben-manes.caffeine:caffeine', version.ref = 'caffeine' }
lombok = { module = 'org.projectlombok:lombok', version.ref = 'lombok' }
slf4j-api = { module = 'org.slf4j:slf4j-api', version.ref = 'slf4j-api' }
jul-to-slf4j = { module = 'org.slf4j:jul-to-slf4j', version.ref = 'slf4j-api' }
logback-classic = { module = 'ch.qos.logback:logback-classic', version.ref = 'logback' }
logback-core = { module = 'ch.qos.logback:logback-core', version.ref = 'logback' }
spring-boot-test = { module = 'org.springframework.boot:spring-boot-starter-test' }
reactor-test = { module = 'io.projectreactor:reactor-test' }
testcontainers = { module = 'org.testcontainers:testcontainers', version.ref = 'testcontainers' }
testcontainers-postgresql = { module = 'org.testcontainers:postgresql', version.ref = 'testcontainers' }
testcontainers-junit-jupiter = { module = 'org.testcontainers:junit-jupiter', version.ref = 'testcontainers' }
easy-random-core = { module = 'org.jeasy:easy-random-core', version.ref = 'easy-random-core' }
protobuf-java = { module = 'com.google.protobuf:protobuf-java', version.ref = 'protobuf-java' }
snappy-java = { module = 'org.xerial.snappy:snappy-java', version.ref = 'snappy-java' }
minio = { module = 'io.minio:minio', version.ref = 'minio' }
okhttp = { module = 'com.squareup.okhttp3:okhttp', version.ref = 'okhttp' }

[bundles]
spring = [
    'spring-starter-webflux',
    'spring-jooq',
    'spring-actuator',
    'spring-security',
    'spring-thymeleaf',
    'spring-oauth2-client',
    'spring-oauth2-rs',
    'spring-session',
    'spring-security-ldap',
    'spring-r2dbc',
    'reactor-extra',
    'spring-aop',
    'spring-validator',
]
spring-redis-session = [
    'spring-data-session-redis',
    'spring-data-redis'
]
internal = [
    'ingestion-contract-server',
    'oddrn-generator-java',
    'odd-integration-manifests'
]
apache-commons = [
    'apache-collections',
    'apache-lang'
]
r2dbc = [
    'r2dbc-spi',
    'r2dbc-postgresql',
    'r2dbc-pool'
]
flyway = [
    'flyway-core',
    'psql-driver'
]
opentelemetry = [
    'opentelemetry-api',
    'opentelemetry-api-metrics',
    'opentelemetry-sdk-metrics',
    'opentelemetry-exporter-otlp-metrics'
]
testcontainers = [
    'testcontainers',
    'testcontainers-postgresql',
    'testcontainers-junit-jupiter'
]
openapi = [
    'spring-webflux',
    'jakarta-validation',
    'jakarta-annotation',
    'jackson-databind-nullable',
    'swagger-annotations',
    'springfox-core',
    "jackson-annotations",
]
jooq-codegen = [
    'flyway-core',
    'psql-driver',
    'testcontainers',
    'testcontainers-postgresql',
    'jooq-codegen',
    'slf4j-api',
    'jul-to-slf4j',
    'logback-classic',
    'logback-core',
    "jackson-annotations"
]