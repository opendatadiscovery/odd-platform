plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.2.1'
    id 'checkstyle'
    id "de.undercouch.download" version "4.1.2" apply false
    id "org.sonarqube" version "3.3"
    id "org.opendatadiscovery.internal.plugin.jooq-generate"
}

if (env == 'dev') {
    apply plugin: "de.undercouch.download"
}

group = 'org.opendatadiscovery'
version = "${version != 'unspecified' ? version : '0.0.1-SNAPSHOT'}"

dependencies {
    implementation project(':odd-platform-api-contract')
    implementation project(':odd-platform-ui')

    implementation libs.bundles.spring
    implementation libs.bundles.spring.redis.session
    implementation libs.bundles.internal
    implementation libs.bundles.apache.commons
    implementation libs.bundles.r2dbc
    implementation libs.bundles.opentelemetry
    implementation libs.bundles.flyway
    implementation libs.micrometer.registry.prometheus
    implementation libs.jooq
    implementation libs.javax.validation
    implementation libs.jackson.datatype.jsr310
    implementation libs.jackson.databind.nullable
    implementation libs.jackson.annotations
    implementation libs.jetbrains.annotations
    implementation libs.mapstruct
    implementation libs.slack.api.model
    implementation libs.shedlock
    implementation libs.shedlock.jdbc.lock.provider

    compileOnly libs.lombok

    annotationProcessor libs.lombok
    annotationProcessor libs.mapstruct.processor

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation libs.bundles.testcontainers
    testImplementation(libs.spring.boot.test) {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation libs.reactor.test
    testImplementation libs.easy.random.core

    jooqGenerationContainer libs.testcontainers.postgresql
}

bootRun {
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"]
}

springBoot {
    buildInfo()
}

jooqGenerate {
    basePackageName = "org.opendatadiscovery.oddplatform.model"
    includeMatches = ".*"
    excludes = "(FLYWAY_SCHEMA_HISTORY | shedlock)"
    inputSchema = "public"
    generate {
        daos = false
        pojos = true
        fluentSetters = true
        validationAnnotations = true
        pojosEqualsAndHashCode = true
    }
}

jibDockerBuild.dependsOn test

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated-jooq/src/main/java'
        }
    }
}

jib {
    from {
        image = 'openjdk:17.0.2'
        if (multiArchContainerBuild == true) {
            platforms {
                platform {
                    architecture = 'amd64'
                    os = 'linux'
                }
                platform {
                    architecture = 'arm64'
                    os = 'linux'
                }
            }
        }
    }
    to {
        image = 'opendatadiscovery/odd-platform'
        tags = ['latest', project.version]
    }
    if (env == "dev") {
        extraDirectories {
            paths {
                path {
                    from = file('build/otlp/')
                    into = '/app/otlp/'
                }
            }
        }
        container {
            creationTime = 'USE_CURRENT_TIMESTAMP'
            appRoot = '/app'
            jvmFlags = ['-javaagent:/app/otlp/opentelemetry-javaagent.jar']
            ports = ['8080']
            workingDirectory = '/app'
        }
    } else {
        container {
            creationTime = 'USE_CURRENT_TIMESTAMP'
            appRoot = '/app'
            ports = ['8080']
            workingDirectory = '/app'
        }
    }
    allowInsecureRegistries = false
}

checkstyle {
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
}

tasks.withType(Checkstyle) {
    reports {
        xml.setRequired(false)
        html.setRequired(false)
    }
}

compileJava.dependsOn jooqDockerGenerate

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks 4
}

if (env == "dev") {
    task downloadOtlp(type: Download) {
        src "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar"
        dest "${buildDir}/otlp/opentelemetry-javaagent.jar"
        overwrite true
    }

    jib.dependsOn downloadOtlp
}

sonarqube {
    properties {
        property "sonar.projectKey", "odd-platform_backend"
        property "sonar.organization", "opendatadiscovery"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}