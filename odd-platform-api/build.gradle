plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.0.0'
    id 'checkstyle'
    id "de.undercouch.download" version "4.1.2" apply false
}

ext {
    env = findProperty('env') ?: 'prod'
}

if (env == 'dev') {
    apply plugin: "de.undercouch.download"
}

group = 'org.opendatadiscovery'
version = "${version != 'unspecified' ? version : '0.0.1-SNAPSHOT'}"

sourceCompatibility = '17'

apply from: 'jooq.generate.gradle'

final boolean skipUIBundle = project.hasProperty("skipUIBundle") &&
        Boolean.parseBoolean(project.property("skipUIBundle").toString())

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-jooq"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.session:spring-session-core"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerRegistryPrometheus"

    implementation "org.opendatadiscovery:ingestion-contract-server:$oddIngestionApiVersion"
    implementation "org.opendatadiscovery:oddrn-generator-java:$oddrnGeneratorVersion"
    implementation project(':odd-platform-api-contract')

    if (!skipUIBundle) {
        implementation project(':odd-platform-ui')
    }

    implementation "org.apache.commons:commons-collections4:$apacheCommonsCollectionsVersion"
    implementation "org.apache.commons:commons-lang3:$apacheCommonsLangVersion"

    implementation "org.flywaydb:flyway-core:$flywayVersion"
    implementation "org.postgresql:postgresql:$postgresqlDriverVersion"

    implementation "javax.validation:validation-api:$validationApiVersion"
    implementation "org.openapitools:jackson-databind-nullable:$jacksonDatabindVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonJsr310Version"

    implementation(platform("io.opentelemetry:opentelemetry-bom:$opentelemetryVersion"))
    implementation(platform("io.opentelemetry:opentelemetry-bom-alpha:$opentelemetryVersionAlpha"))

    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-api-metrics")
    implementation("io.opentelemetry:opentelemetry-sdk-metrics")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp-metrics")


    implementation("org.springframework.boot:spring-boot-starter-data-ldap")
    implementation("org.springframework.security:spring-security-ldap")

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation("io.projectreactor:reactor-test")

    testImplementation "org.testcontainers:testcontainers:$testContainersVersion"
    testImplementation "org.testcontainers:postgresql:$testContainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    jooqGenerationContainer("org.testcontainers:postgresql:$testContainersVersion")
}

springBoot {
    buildInfo()
}

jooq {
    basePackageName = "org.opendatadiscovery.oddplatform.model"
    includeMatches = ".*"
    excludes = "FLYWAY_SCHEMA_HISTORY"
    imageName = "postgres:13.2-alpine"
    inputSchema = "public"
    generate {
        daos = false
        pojos = true
        fluentSetters = true
        validationAnnotations = true
        pojosEqualsAndHashCode = true
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated-jooq/src/main/java'
        }
    }
}

jib {
    from {
        image = 'openjdk:17-alpine'
    }
    to {
        image = 'opendatadiscovery/odd-platform'
        tags = ['latest', project.version]
    }
    if (env == "dev") {
        extraDirectories {
            paths {
                path {
                    from = file('build/otlp/')
                    into = '/app/otlp/'
                }
            }
        }
        container {
            creationTime = 'USE_CURRENT_TIMESTAMP'
            appRoot = '/app'
            jvmFlags = ['-Xms1G', '-Xmx1G', '-javaagent:/app/otlp/opentelemetry-javaagent.jar']
            ports = ['8080']
            workingDirectory = '/app'
        }
    } else {
        container {
            creationTime = 'USE_CURRENT_TIMESTAMP'
            appRoot = '/app'
            jvmFlags = ['-Xms1G', '-Xmx1G']
            ports = ['8080']
            workingDirectory = '/app'
        }
    }
    allowInsecureRegistries = false
}

checkstyle {
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
}

task buildlessCheckstyleMain(type: Checkstyle) {
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    source 'src/main/java'
    classpath = files()
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
}

task buildlessCheckstyleTest(type: Checkstyle) {
    configFile = project(':').file('config/checkstyle/checkstyle.xml')
    source 'src/test/java'
    classpath = files()
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled false
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

compileJava.dependsOn tasks.jooqDockerGenerate

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

if (env == "dev") {
    task downloadOtlp(type: Download) {
        src "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar"
        dest "${buildDir}/otlp/opentelemetry-javaagent.jar"
        overwrite true
    }

    jibDockerBuild.dependsOn tasks.downloadOtlp
}