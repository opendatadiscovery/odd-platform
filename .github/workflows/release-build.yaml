name: Release Build
on:
  release:
    types: [published]

  workflow_dispatch:
    inputs:
      rebuild:
        description: 'A tag name for building previously created release'
        required: false
        default: '0.0.0'
      buildOptions:
        description: 'Additional options for Gradle build command'
        required: false
        default: ''

jobs:
  release:
    concurrency: release
    runs-on: self-hosted
    outputs:
      version: ${{steps.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check version
        id: get-version
        run: |
          if [[ "${{ github.event.action }}" == "published" ]]
            then
              VERSION="${{ github.event.release.tag_name }}"
            else
              LATEST=`git tag -l --sort=creatordate | tail -1`
              VERSION=`echo ${LATEST} | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g'`-${{ github.sha }}
          fi
          if [[ -n "${{ github.event.inputs.buildOptions }}" ]]
            then
              VERSION="${{ github.event.inputs.buildOptions }}"
          fi
          echo ::set-output name=version::${VERSION}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Build and run tests
        env:
          GENERATE_SOURCEMAP: false
          CI: false
        run: ./gradlew build ${{ github.event.inputs.buildOptions }} --no-daemon --parallel --scan
      - name: Build the image
        run: ./gradlew jibDockerBuild ${{ github.event.inputs.buildOptions }} --no-daemon --image odd-platform -Pversion=${{ steps.get-version.outputs.version }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_GITHUB }}
      - name: Retag image in GHCR
        if: ${{ github.event.action == 'published' }}
        run: |
          docker tag odd-platform:${{ steps.get-version.outputs.version }} ghcr.io/opendatadiscovery/odd-platform:${{ steps.get-version.outputs.version }}
          docker push ghcr.io/opendatadiscovery/odd-platform:${{ steps.get-version.outputs.version }}
          docker tag odd-platform:${{ steps.get-version.outputs.version }} ghcr.io/opendatadiscovery/odd-platform:latest
          docker push ghcr.io/opendatadiscovery/odd-platform:latest
